"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>v});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=a,v=p["".concat(i,".").concat(f)]||p[f]||d[f]||o;return t?n.createElement(v,l(l({ref:r},u),{},{components:t})):n.createElement(v,l({ref:r},u))}));function v(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5982:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_label:"On Audio Level Changed"},l=void 0,s={unversionedId:"blueprints/Events/on-audio-level-changed",id:"blueprints/Events/on-audio-level-changed",title:"on-audio-level-changed",description:"Triggered when there are new audio levels available after calling the Get Audio Levels function. The event provides two arrays: an array of IDs of the current speakers and an array of floating point numbers representing each participant's audio level. The order of levels corresponds to the order of ActiveSpeakers. A value of 0.0 represents silence and a value of 1.0 represents the maximum volume.",source:"@site/docs/blueprints/Events/on-audio-level-changed.md",sourceDirName:"blueprints/Events",slug:"/blueprints/Events/on-audio-level-changed",permalink:"/comms-sdk-unreal/docs/blueprints/Events/on-audio-level-changed",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/blueprints/Events/on-audio-level-changed.md",tags:[],version:"current",frontMatter:{sidebar_label:"On Audio Level Changed"},sidebar:"tutorialSidebar",previous:{title:"On Active Speaker Changed",permalink:"/comms-sdk-unreal/docs/blueprints/Events/on-active-speaker-changed"},next:{title:"On Connected",permalink:"/comms-sdk-unreal/docs/blueprints/Events/on-connected"}},i={},c=[],u={toc:c};function p(e){let{components:r,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,o,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Triggered when there are new audio levels available after calling the Get Audio Levels function. The event provides two arrays: an array of IDs of the current speakers and an array of floating point numbers representing each participant's audio level. The order of levels corresponds to the order of ActiveSpeakers. A value of 0.0 represents silence and a value of 1.0 represents the maximum volume."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sample",src:t(1580).Z,width:"1058",height:"333"})))}p.isMDXComponent=!0},1580:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/on_audio_levels_changed-f1e478bf64a6c562f962133622c139c2.PNG"}}]);